#!/bin/bash

<<comment
*--------
    Hey Pfeff
      This function just creates a docker image and connects to it with exec
      If there is another parameter, that will be the image pulled by docker
      Otherwise, just use the ubuntu image

    Here is what I need from you:
    - I want to be able to add a flags to this command
    - Instead of having $1 and $2 I want to use flags
      - For instance: -name or -image or -saveOnClose
    - After you implement the flags, I want to save the container when I close 
      the session and kill/delete the container, all with a flag -saveOnClose
      - For this, use the following docker commands:
        * docker kill
        * docker rm
      - Use --help to learn more about the command options
*--------
comment
storageDir=".dock_storage"

print_usage() {
    echo "usage: dock <container-name> <image>"
    return
}

<<comm
  These two functions are where we will store any temp files we need
  to perform actions based on output.
comm
start_up() {
  echo "Creating hidden storage directory $storageDir to save temporary files"
  mkdir $storageDir
}
clean_up() {
  echo "Removing $storageDir and all associated files"
  rm -rf $storageDir
}

init() { # dock -i <container-name>
  echo "Starting up container $1 and attaching to it..."
  docker run --name $1 -dt ubuntu
  docker exec -it $1 "/bin/bash"
}

new() { # dock -n <container-name>
  echo "What image would you like to use?"
  read image
  echo "Starting $1 with image $image..."
  docker run --name $1 -dt $image
  echo "Attempting to attach to container $1..."
  docker exec -it $1 "/bin/bash"
}

kill() { # dock -k <containerID || containerName>
  docker ps -a | grep $1 > /dev/null
  if [[ $? -ne 0 ]]; then
    echo "Container doesn't exist! Exiting...."
    return
  fi
  
  docker ps | grep $1 > /dev/null
  if [[ $? -eq 0 ]]; then 
    echo "Killing and removing container $1..."
    docker kill $1 > /dev/null
    docker rm $1 > /dev/null
  else
    echo "Removing container $1..."
    docker rm $1 > /dev/null
  fi

  if [[ $? -ne 0 ]]; then 
    echo "Something went wrong..."
  fi
}

kill_all() { # dock -q
  echo "Kill them all!"
  tmpFile="dockq$RANDOM.txt"
  docker ps -aq > "$storageDir/$tmpFile"
  while read -r containerID; do
    docker ps -q | grep $containerID > /dev/null
    if [[ $? -eq 0 ]]; then 
      echo "Killing & removing docker container $containerID..."
      docker kill $containerID > /dev/null 
      docker rm $containerID > /dev/null
    else
      docker ps -aq | grep $containerID > /dev/null
      if [[ $? -eq 0 ]]; then 
        echo "Removing docker container $containerID..."
        docker rm $containerID > /dev/null
      else
        echo "Container does not exist. This shouldn't happen."
      fi
    fi
  done < "$storageDir/$tmpFile"
  if [[ $? -ne 0 ]]; then
    echo "Something went wrong..."
  fi
}

start_up
while getopts 'i:n:r:lsxak:q' flag; do
  case "${flag}" in
    i) 
      init ${OPTARG}
      ;;
    n) 
      new ${OPTARG}
      ;;
    r) 
      restore_flag="${OPTARG}" 
      ;;
    l) 
      list_flag = 'true' 
      ;;
    s) 
      save_flag = 'true' 
      ;;
    x) 
      saveAndClose_flag = 'true' 
      ;;
    a) 
      listSaved_flag = 'true' 
      ;;
    k) 
      kill ${OPTARG}
      ;;
    q)
      echo "The following containers will be deleted:"
      docker ps -a
      echo "Please type \"yes\" to destroy all existing, running containers: "
      read line
      echo 
      if [[ $line == "yes" || $line == "y" ]]; then
        kill_all
      fi
      ;;
    v) 
      verbose='true' 
      ;;
    *) 
      print_usage
      exit 1 
      ;;
  esac
done
clean_up

<<comm
docker run --name $1 -dt $2
docker exec -it $1 "/bin/bash"
comm